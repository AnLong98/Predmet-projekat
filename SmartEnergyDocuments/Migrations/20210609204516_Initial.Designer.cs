// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartEnergy.Infrastructure;

namespace SmartEnergy.Documents.Migrations
{
    [DbContext(typeof(DocumentsDbContext))]
    [Migration("20210609204516_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Call", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsumerID")
                        .HasColumnType("int");

                    b.Property<string>("Hazard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncidentID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IncidentID");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Incident", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ATA")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("CrewID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ETA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ETR")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IncidentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<double?>("VoltageLevel")
                        .HasColumnType("float");

                    b.Property<DateTime?>("WorkBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Instruction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DeviceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("bit");

                    b.Property<int>("WorkPlanID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WorkPlanID");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.MultimediaAnchor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("MultimediaAnchors");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.MultimediaAttachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MultimediaAnchorID");

                    b.ToTable("MultimediaAttachments");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NotificationAnchorID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.NotificationAnchor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("NotificationAnchors");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Resolution", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Construction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncidentID")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subcause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IncidentID")
                        .IsUnique();

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.SafetyDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GroundingRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<bool>("OperationCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Ready")
                        .HasColumnType("bit");

                    b.Property<int?>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<bool>("TagsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkPlanID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.HasIndex("StateChangeAnchorID")
                        .IsUnique()
                        .HasFilter("[StateChangeAnchorID] IS NOT NULL");

                    b.HasIndex("WorkPlanID");

                    b.ToTable("SafetyDocuments");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.StateChangeAnchor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("StateChangeAnchors");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.StateChangeHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StateChangeAnchorID");

                    b.ToTable("StateChangeHistories");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.WorkPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkRequestID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.HasIndex("StateChangeAnchorID")
                        .IsUnique()
                        .HasFilter("[StateChangeAnchorID] IS NOT NULL");

                    b.HasIndex("WorkRequestID")
                        .IsUnique();

                    b.ToTable("WorkPlans");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.WorkRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncidentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("bit");

                    b.Property<int?>("MultimediaAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NotificationAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateChangeAnchorID")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IncidentID")
                        .IsUnique();

                    b.HasIndex("MultimediaAnchorID")
                        .IsUnique()
                        .HasFilter("[MultimediaAnchorID] IS NOT NULL");

                    b.HasIndex("NotificationAnchorID")
                        .IsUnique()
                        .HasFilter("[NotificationAnchorID] IS NOT NULL");

                    b.HasIndex("StateChangeAnchorID")
                        .IsUnique()
                        .HasFilter("[StateChangeAnchorID] IS NOT NULL");

                    b.ToTable("WorkRequests");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Call", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.Incident", "Incident")
                        .WithMany("Calls")
                        .HasForeignKey("IncidentID");

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Incident", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("Incident")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.Incident", "MultimediaAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithOne("Incident")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.Incident", "NotificationAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationAnchor");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Instruction", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.WorkPlan", "WorkPlan")
                        .WithMany("Instructions")
                        .HasForeignKey("WorkPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.MultimediaAttachment", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithMany("MultimediaAttachments")
                        .HasForeignKey("MultimediaAnchorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultimediaAnchor");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Notification", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationAnchorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationAnchor");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Resolution", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.Incident", "Incident")
                        .WithOne("Resolution")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.Resolution", "IncidentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.SafetyDocument", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("SafetyDocument")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.SafetyDocument", "MultimediaAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithOne("SafetyDocument")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.SafetyDocument", "NotificationAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithOne("SafetyDocument")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.SafetyDocument", "StateChangeAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.WorkPlan", "WorkPlan")
                        .WithMany("SafetyDocuments")
                        .HasForeignKey("WorkPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationAnchor");

                    b.Navigation("StateChangeAnchor");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.StateChangeHistory", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithMany("StateChangeHistories")
                        .HasForeignKey("StateChangeAnchorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateChangeAnchor");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.WorkPlan", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkPlan", "MultimediaAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.NotificationAnchor", "NotificationAnchor")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkPlan", "NotificationAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkPlan", "StateChangeAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.WorkRequest", "WorkRequest")
                        .WithOne("WorkPlan")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkPlan", "WorkRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationAnchor");

                    b.Navigation("StateChangeAnchor");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.WorkRequest", b =>
                {
                    b.HasOne("SmartEnergy.Documents.DomainModels.Incident", "Incident")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkRequest", "IncidentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartEnergy.Documents.DomainModels.MultimediaAnchor", "MultimediaAnchor")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkRequest", "MultimediaAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.NotificationAnchor", "NotificationsAnchor")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkRequest", "NotificationAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartEnergy.Documents.DomainModels.StateChangeAnchor", "StateChangeAnchor")
                        .WithOne("WorkRequest")
                        .HasForeignKey("SmartEnergy.Documents.DomainModels.WorkRequest", "StateChangeAnchorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Incident");

                    b.Navigation("MultimediaAnchor");

                    b.Navigation("NotificationsAnchor");

                    b.Navigation("StateChangeAnchor");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.Incident", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("Resolution");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.MultimediaAnchor", b =>
                {
                    b.Navigation("Incident");

                    b.Navigation("MultimediaAttachments");

                    b.Navigation("SafetyDocument");

                    b.Navigation("WorkPlan");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.NotificationAnchor", b =>
                {
                    b.Navigation("Incident");

                    b.Navigation("Notifications");

                    b.Navigation("SafetyDocument");

                    b.Navigation("WorkPlan");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.StateChangeAnchor", b =>
                {
                    b.Navigation("SafetyDocument");

                    b.Navigation("StateChangeHistories");

                    b.Navigation("WorkPlan");

                    b.Navigation("WorkRequest");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.WorkPlan", b =>
                {
                    b.Navigation("Instructions");

                    b.Navigation("SafetyDocuments");
                });

            modelBuilder.Entity("SmartEnergy.Documents.DomainModels.WorkRequest", b =>
                {
                    b.Navigation("WorkPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
